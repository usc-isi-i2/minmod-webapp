library(shiny)
shiny::runApp('./shiny/', launch.browser = T)
library(shiny)
library(ggplot2)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
sidebarLayout(
sidebarPanel(
# Add options or controls if needed
),
mainPanel(
plotOutput("cuPlot"),
plotOutput("auPlot")
)
)
)
# Define server logic
server <- function(input, output) {
data <- read.csv("./myGatm.csv")
output$cuPlot <- renderPlot({
ggplot(data, aes(x = Ore, y = Cu)) +
geom_point() +
theme_minimal() +
labs(title = "Copper Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Copper Grade")
})
output$auPlot <- renderPlot({
ggplot(data, aes(x = Ore, y = Au)) +
geom_point() +
theme_minimal() +
labs(title = "Gold Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Gold Grade")
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(ggiraph)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
sidebarLayout(
sidebarPanel(
# Add options or controls if needed
),
mainPanel(
girafeOutput("cuPlot"),
girafeOutput("auPlot")
)
)
)
# Define server logic
server <- function(input, output) {
data <- read.csv("path/to/your/myGatm.csv")
output$cuPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Cu, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Copper Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Copper Grade")
girafe(ggobj = gg)
})
output$auPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Au, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Gold Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Gold Grade")
girafe(ggobj = gg)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(ggiraph)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
sidebarLayout(
sidebarPanel(
# Add options or controls if needed
),
mainPanel(
girafeOutput("cuPlot"),
girafeOutput("auPlot")
)
)
)
# Define server logic
server <- function(input, output) {
data <- read.csv("./myGatm.csv")
output$cuPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Cu, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Copper Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Copper Grade")
girafe(ggobj = gg)
})
output$auPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Au, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Gold Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Gold Grade")
girafe(ggobj = gg)
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages('ggiraph')
library(shiny)
library(ggplot2)
library(ggiraph)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
sidebarLayout(
sidebarPanel(
# Add options or controls if needed
),
mainPanel(
girafeOutput("cuPlot"),
girafeOutput("auPlot")
)
)
)
# Define server logic
server <- function(input, output) {
data <- read.csv("./myGatm.csv")
output$cuPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Cu, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Copper Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Copper Grade")
girafe(ggobj = gg)
})
output$auPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Au, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Gold Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Gold Grade")
girafe(ggobj = gg)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(ggiraph)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
sidebarLayout(
sidebarPanel(
# Add options or controls if needed
),
mainPanel(
girafeOutput("cuPlot"),
girafeOutput("auPlot")
)
)
)
# Define server logic
server <- function(input, output) {
data <- read.csv("./myGatm.csv")
output$cuPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Cu, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Copper Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Copper Grade")
#girafe(ggobj = gg)
})
output$auPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Au, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Gold Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Gold Grade")
#girafe(ggobj = gg)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(ggiraph)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
sidebarLayout(
sidebarPanel(
# Add options or controls if needed
),
mainPanel(
girafeOutput("cuPlot"),
girafeOutput("auPlot")
)
)
)
# Define server logic
server <- function(input, output) {
data <- read.csv("./myGatm.csv")
output$cuPlot <- renderGirafe({
ggplot(data, aes(x = Ore, y = Cu, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Copper Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Copper Grade")
#girafe(ggobj = gg)
})
output$auPlot <- renderGirafe({
ggplot(data, aes(x = Ore, y = Au, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Gold Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Gold Grade")
#girafe(ggobj = gg)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(ggiraph)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
sidebarLayout(
sidebarPanel(
# Add options or controls if needed
),
mainPanel(
girafeOutput("cuPlot"),
girafeOutput("auPlot")
)
)
)
# Define server logic
server <- function(input, output) {
data <- read.csv("./myGatm.csv")
output$cuPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Cu, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Copper Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Copper Grade")
girafe(ggobj = gg)
})
output$auPlot <- renderGirafe({
gg <- ggplot(data, aes(x = Ore, y = Au, tooltip = Name)) +
geom_point_interactive() +
theme_minimal() +
labs(title = "Gold Grade vs Ore Tonnage",
x = "Ore Tonnage",
y = "Gold Grade")
girafe(ggobj = gg)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(ggiraph)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
uiOutput("plots")
)
# Define server logic
server <- function(input, output) {
data <- read.csv("path/to/your/myGatm.csv")
# Dynamically create plots based on grade columns
output$plots <- renderUI({
grade_cols <- setdiff(names(data), c("ID", "Name", "Ore"))
plot_output_list <- lapply(grade_cols, function(col) {
plotname <- paste0(col, "Plot")
girafeOutput(plotname)
})
do.call(fluidRow, plot_output_list)
})
# Generating each plot
for(col in setdiff(names(data), c("ID", "Name", "Ore"))) {
local({
colname <- col
output[[paste0(colname, "Plot")]] <- renderGirafe({
gg <- ggplot(data, aes_string(x = "Ore", y = colname, tooltip = "Name")) +
geom_point_interactive() +
theme_minimal() +
labs(title = paste0(colname, " Grade vs Ore Tonnage"),
x = "Ore Tonnage",
y = paste0(colname, " Grade"))
girafe(ggobj = gg)
})
})
}
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(ggiraph)
# Define UI
ui <- fluidPage(
titlePanel("Ore Tonnage vs Metal Grades"),
uiOutput("plots")
)
# Define server logic
server <- function(input, output) {
data <- read.csv("./myGatm.csv")
# Dynamically create plots based on grade columns
output$plots <- renderUI({
grade_cols <- setdiff(names(data), c("ID", "Name", "Ore"))
plot_output_list <- lapply(grade_cols, function(col) {
plotname <- paste0(col, "Plot")
girafeOutput(plotname)
})
do.call(fluidRow, plot_output_list)
})
# Generating each plot
for(col in setdiff(names(data), c("ID", "Name", "Ore"))) {
local({
colname <- col
output[[paste0(colname, "Plot")]] <- renderGirafe({
gg <- ggplot(data, aes_string(x = "Ore", y = colname, tooltip = "Name")) +
geom_point_interactive() +
theme_minimal() +
labs(title = paste0(colname, " Grade vs Ore Tonnage"),
x = "Ore Tonnage",
y = paste0(colname, " Grade"))
girafe(ggobj = gg)
})
})
}
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('sample_test3.R')
runApp('sample_test4.R')
runApp('sample_test4.R')
runApp('sample_test4.R')
runApp('sample_test4.R')
runApp('sample_test4.R')
runApp('sample_test4.R')
runApp('sample_test4.R')
library(shiny)
shiny::runApp('./shiny/', launch.browser = T)
